
import os
import sys
import numpy as np
import json
import torch

### path and parameter
path_data = './MLDS_hw2_data/'


### load data

### load *.npy
lst_name_train_npy = os.listdir('{}training_data/feat'.format(path_data))
lst_name_test_npy = os.listdir('{}testing_data/feat'.format(path_data))

lst_train_npy = []
for npy in lst_name_train_npy :
    lst_train_npy += [np.load('{}training_data/feat/{}'.format(path_data, npy))]
lst_test_npy = []
for npy in lst_name_test_npy :
    lst_test_npy += [np.load('{}testing_data/feat/{}'.format(path_data, npy))]

print ('len of lst_train_npy : '+str(len(lst_train_npy))+'\nshape of train npy : '+str(lst_train_npy[0].shape))
print ('len of lst_test_npy : '+str(len(lst_test_npy))+'\nshape of test npy : '+str(lst_test_npy[0].shape))

### load training_label.json testing_label.json
with open('{}training_label.json'.format(path_data)) as f :
    lst_dict_label_train = json.load(f)
print ('\ntraining_label.json : ')
print ('caption : \n' + str(lst_dict_label_train[0]['caption']))
print ('id : \n' + str(lst_dict_label_train[0]['id']))
    

### build dict_map_W2I and dict_map_I2W to mapping from word to index

### count unique words
lst_word = list(set([word for dict_label_train in lst_dict_label_train for str_label in dict_label_train['caption'] for word in str_label[:-1].split()]))
lst_word += ['<BOS>']
lst_word += ['<EOS>']
n_class = len(lst_word)
print ('len(lst_word) : {}'.format(n_class))

### map from word to index
dict_map_W2I = dict()
index = 0
for word in lst_word :
    if word not in dict_map_W2I :
        dict_map_W2I[word] = index
        index += 1
        
### map from index to word
dict_map_I2W = {v:k for k,v in dict_map_W2I.items()}

print ('<<-- dict_map_W2I and dict_I2W are built completely -->>')

### index to one-hot
def Str2OneHot(sentence, n_class) :
    ### sentence to lst_index_sentence
    sentence = '<BOS> ' + sentence[:-1] + ' <EOS>'
    lst_word = sentence.split()
    ary_oneHot = np.zeros((len(lst_word),n_class))
    lst_index_word = [dict_map[word] for word in lst_word]
    ary_oneHot[range(len(lst_word)),lst_index_word] = 1
    return ary_oneHot
    
### just for test
Str2OneHot('A woman goes under a horse.', n_class)
        

### note
# remember to add <BOS> and <EOS>
# Tom's should split as "TOM" and "s"
# notice [:-1] to delete "."
